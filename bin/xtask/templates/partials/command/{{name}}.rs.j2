use nject::injectable;
use crate::shared::command_handler::{CommandHandler, CommandResult};
use domain::{{module}}::event::{{module | pascal_case}}Event;
use bon::Builder;
use serde::Deserialize;
use utoipa::ToSchema;
use crate::error::ApplicationError;

#[derive(Debug, Deserialize, Builder, ToSchema)]
pub struct {{name | pascal_case}}Command {
}

#[derive(Debug)]
#[injectable]
pub struct {{name | pascal_case}}CommandHandler {
}

impl CommandHandler for {{name | pascal_case}}CommandHandler {
    type Command = {{name | pascal_case}}Command;
    type Output = ();
    type Event = {{module | pascal_case}}Event;

    async fn execute(
            &self,
            _cmd: Self::Command,
        ) -> Result<CommandResult<Self::Output, Self::Event>, ApplicationError> {

        Ok(CommandResult::without_events(()))
    }
}
