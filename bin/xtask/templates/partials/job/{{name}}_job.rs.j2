use anyhow::Result;
use background_job::Job;
use nject::injectable;
use serde::{Deserialize, Serialize};

#[derive(Clone, Serialize, Deserialize)]
pub struct {{name | pascal_case}}JobParams {
    // Define job parameters here
}

#[derive(Clone)]
#[injectable]
pub struct {{name | pascal_case}}Job;

impl Job for {{name | pascal_case}}Job {
    type Params = {{name | pascal_case}}JobParams;
    const CONCURRENCY: usize = 1;
    const RETRIES: usize = 3;
    const NAME: &'static str = "{{name}}_job";
    const TIMEOUT: std::time::Duration = std::time::Duration::from_secs(30);

    async fn execute(&self, _params: Self::Params) -> Result<()> {

        Ok(())
    }
}
