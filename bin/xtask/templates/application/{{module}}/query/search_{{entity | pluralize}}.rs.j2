use bon::Builder;
use infrastructure::shared::pg_pool::PgPool;
use domain::{{module}}::error::{{module | pascal_case}}Error;
use nject::injectable;
use serde::Deserialize;
use serde_with::serde_as;
use single_flight::single_flight;
use crate::{
    {{module}}::dto::{{entity}}::{{entity | pascal_case}}Dto,
    shared::{
        paging_query::PagingQuery,
        paging_result::PagingResult,
    },
};
use crate::shared::query_handler::QueryHandler;
use utoipa::IntoParams;
use cache_kit::Cache;
use cache_kit::cached_impl;

#[serde_as]
#[derive(Debug, Clone, Eq, PartialEq, Hash, Deserialize, IntoParams, Builder)]
pub struct Search{{entity | pluralize | pascal_case}}Query {
    #[serde(flatten)]
    #[param(inline)]
    paging: PagingQuery,
}

#[derive(Debug, Clone)]
#[injectable]
pub struct Search{{entity | pluralize | pascal_case}}QueryHandler {
    pool: PgPool,
    cache: Cache,
}

#[cached_impl]
impl QueryHandler for Search{{entity | pluralize | pascal_case}}QueryHandler {
    type Query = Search{{entity | pluralize | pascal_case}}Query;
    type Output = PagingResult<{{entity | pascal_case}}Dto>;
    type Error = {{module | pascal_case}}Error;

    #[tracing::instrument]
    #[single_flight]
    #[cached(prefix = "{{module}}:search_{{entity | pluralize | snake_case}}:", ttl = "15min")]
    async fn query(
        &self,
        query: Search{{entity | pluralize | pascal_case}}Query,
    ) -> Result<PagingResult<{{entity | pascal_case}}Dto>, {{module | pascal_case}}Error> {
        let total_future = sqlx::query_scalar!(
            r#"
            SELECT COUNT(*) AS "count!"
            FROM {{table_name}}
            "#,
        )
        .fetch_one(&self.pool);
        let page = query.paging.page();
        let page_size = query.paging.page_size();
        let offset = (page - 1) * page_size;
        let rows_future = sqlx::query_as!(
            {{entity | pascal_case}}Dto,
            r#"
        SELECT {{fields | map(attribute="name") | join(', ')}}
        FROM {{table_name}}
        LIMIT $1 OFFSET $2
        "#,
            page_size,
            offset,
        )
        .fetch_all(&self.pool);
        let (total, rows) = tokio::try_join!(total_future, rows_future)?;
        Ok(PagingResult { total, items: rows })
    }
}
