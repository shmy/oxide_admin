use anyhow::Result;
use bon::Builder;
use domain::{{module}}::error::{{module | pascal_case }}Error;
use domain::{{module}}::event::{{module | pascal_case }}Event;
use domain::{{module}}::entity::{{entity}}::{{entity | pascal_case}};
use domain::{{module}}::value_object::{{entity}}_id::{{entity | pascal_case}}Id;
use domain::shared::port::domain_repository::DomainRepository;
use infrastructure::repository::{{module}}::{{entity}}_repository::{{entity | pascal_case}}RepositoryImpl;
use nject::injectable;
use serde::Deserialize;

use crate::shared::command_handler::{CommandHandler, CommandResult};

#[derive(Debug, Deserialize, Builder)]
pub struct Create{{entity | pascal_case}}Command {
    {%- for field in domain_fields %}
    {{field.name}}: {{field.type}},
    {%- endfor %}
}

#[derive(Debug)]
#[injectable]
pub struct Create{{entity | pascal_case}}CommandHandler {
    {{entity}}_repo: {{entity | pascal_case}}RepositoryImpl,
}

impl CommandHandler for Create{{entity | pascal_case}}CommandHandler {
    type Command = Create{{entity | pascal_case}}Command;
    type Output = {{entity | pascal_case}};
    type Event = {{module | pascal_case }}Event;
    type Error = {{module | pascal_case }}Error;

    #[tracing::instrument]
    async fn execute(
        &self,
        cmd: Self::Command,
    ) -> Result<CommandResult<Self::Output, Self::Event>, Self::Error> {
        let {{entity}} = {{entity | pascal_case}}::builder()
            .id({{entity | pascal_case}}Id::generate())
            {%- for field in domain_fields %}
            .{{field.name}}(cmd.{{field.name}})
            {%- endfor %}
            .build();
        let {{entity}} = self.{{entity}}_repo.save({{entity}}).await?;
        Ok(CommandResult::with_event(
            {{entity}}.clone(),
            {{module | pascal_case }}Event::{{entity | pluralize | pascal_case}}Created { items: vec![{{entity}}] },
        ))
    }
}
