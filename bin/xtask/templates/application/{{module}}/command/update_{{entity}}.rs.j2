use bon::Builder;
use domain::{{module}}::value_object::{{entity}}_id::{{entity | pascal_case}}Id;
use domain::{{module}}::{entity::{{entity}}::{{entity | pascal_case}}, event::{{module | pascal_case }}Event};
use domain::shared::port::domain_repository::DomainRepository;
use domain::shared::event_util::UpdatedEvent;
use infrastructure::repository::{{module}}::{{entity}}_repository::{{entity | pascal_case}}RepositoryImpl;
use nject::injectable;
use serde::Deserialize;
use utoipa::ToSchema;
use crate::error::ApplicationError;
use crate::shared::command_handler::{CommandHandler, CommandResult};

#[derive(Debug, Deserialize, Builder, ToSchema)]
pub struct Update{{entity | pascal_case}}Command {
    id: {{entity | pascal_case}}Id,
    {%- for field in domain_fields %}
    {{field.name}}: Option<{{field.type}}>,
    {%- endfor %}
}

#[derive(Debug)]
#[injectable]
pub struct Update{{entity | pascal_case}}CommandHandler {
    {{entity}}_repo: {{entity | pascal_case}}RepositoryImpl,
}

impl CommandHandler for Update{{entity | pascal_case}}CommandHandler {
    type Command = Update{{entity | pascal_case}}Command;
    type Output = {{entity | pascal_case}};
    type Event = {{module | pascal_case }}Event;

    #[tracing::instrument]
    async fn execute(
        &self,
        cmd: Self::Command,
    ) -> Result<CommandResult<Self::Output, Self::Event>, ApplicationError> {
        let id = cmd.id;
        let mut {{entity}} = self.{{entity}}_repo.by_id(&id).await?;
        let before = {{entity}}.clone();
        {%- for field in domain_fields %}
        if let Some({{field.name}}) = cmd.{{field.name}} {
            {{entity}}.update_{{field.name}}({{field.name}});
        }
        {%- endfor %}
        let {{entity}} = self.{{entity}}_repo.save({{entity}}).await?;
        Ok(CommandResult::with_event(
            {{entity}}.clone(),
            {{module | pascal_case }}Event::{{entity | pluralize | pascal_case}}Updated {
                items: vec![UpdatedEvent {
                    before,
                    after: {{entity}},
                }],
            },
        ))
    }
}
