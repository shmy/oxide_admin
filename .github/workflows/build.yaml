name: Build

on:
  push:
    branches:
      - main

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      # for sqlx::test
      postgres:
        image: postgres:17-alpine
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U test -d test_db"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://test:test@127.0.0.1:5432/test_db
      JWT_ACCESS_TOKEN_SECRET: tirHl5AYuj3x7QPLXG1f4ZVas2Dn4gRi
      FS_HMAC_SECRET: SVCpfZHIWK5nvl3wqELIeuScxaejA4bj
      SQLX_OFFLINE: true

    steps:
      - name: Clone code
        uses: actions/checkout@v4
      - name: Restore rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: llvm-tools-preview
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Install hurl
        uses: gacts/install-hurl@v1
      - name: Install just
        uses: extractions/setup-just@v3
      - name: Backend test
        run: just test_coverage_ci
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs: test
    steps:
      - name: Clone code
        uses: actions/checkout@v4
      - name: Restore bun cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
      - name: Restore rust cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install bun
        uses: oven-sh/setup-bun@v2
      - name: Install rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Install just
        uses: extractions/setup-just@v3
      - name: Setup rust
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Install frontend dependencies
        run: cd frontend && bun install
      - name: Build backend
        run: just build_linux_x86_64_gnu_ci
      - name: Extract binary
        run: mv target/x86_64-unknown-linux-gnu/release/server server
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      - name: Build and push docker image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}
          RUN_NUMBER_ID=${{ github.run_number }}
          docker build -f Dockerfile.ci -t $IMAGE_ID:$RUN_NUMBER_ID -t $IMAGE_ID:latest .
          docker push $IMAGE_ID:$RUN_NUMBER_ID
          docker push $IMAGE_ID:latest
